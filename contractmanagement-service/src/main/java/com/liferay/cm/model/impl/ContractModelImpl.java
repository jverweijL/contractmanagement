/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.cm.model.impl;

import com.liferay.cm.model.Contract;
import com.liferay.cm.model.ContractModel;
import com.liferay.cm.model.ContractSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Contract service. Represents a row in the &quot;CM_Contract&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ContractModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContractImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContractImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ContractModelImpl
	extends BaseModelImpl<Contract> implements ContractModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contract model instance should use the <code>Contract</code> interface instead.
	 */
	public static final String TABLE_NAME = "CM_Contract";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"contractId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"modifierId", Types.BIGINT}, {"modifierName", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"version", Types.VARCHAR},
		{"statusId", Types.BIGINT}, {"typeId", Types.BIGINT},
		{"startdate", Types.TIMESTAMP}, {"reviewdate", Types.TIMESTAMP},
		{"autoextend", Types.BOOLEAN}, {"termId", Types.BIGINT},
		{"remarks", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifierName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("reviewdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("autoextend", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("termId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CM_Contract (uuid_ VARCHAR(75) null,contractId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,modifierId LONG,modifierName VARCHAR(75) null,name VARCHAR(75) null,version VARCHAR(75) null,statusId LONG,typeId LONG,startdate DATE null,reviewdate DATE null,autoextend BOOLEAN,termId LONG,remarks STRING null)";

	public static final String TABLE_SQL_DROP = "drop table CM_Contract";

	public static final String ORDER_BY_JPQL =
		" ORDER BY contract.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CM_Contract.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.cm.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.cm.model.Contract"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.cm.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.cm.model.Contract"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.cm.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.cm.model.Contract"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long CONTRACTID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Contract toModel(ContractSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Contract model = new ContractImpl();

		model.setUuid(soapModel.getUuid());
		model.setContractId(soapModel.getContractId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifierId(soapModel.getModifierId());
		model.setModifierName(soapModel.getModifierName());
		model.setName(soapModel.getName());
		model.setVersion(soapModel.getVersion());
		model.setStatusId(soapModel.getStatusId());
		model.setTypeId(soapModel.getTypeId());
		model.setStartdate(soapModel.getStartdate());
		model.setReviewdate(soapModel.getReviewdate());
		model.setAutoextend(soapModel.isAutoextend());
		model.setTermId(soapModel.getTermId());
		model.setRemarks(soapModel.getRemarks());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Contract> toModels(ContractSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Contract> models = new ArrayList<Contract>(soapModels.length);

		for (ContractSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.cm.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.cm.model.Contract"));

	public ContractModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contractId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContractId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contractId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Contract.class;
	}

	@Override
	public String getModelClassName() {
		return Contract.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Contract, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Contract, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contract, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Contract)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Contract, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Contract, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Contract)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Contract, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Contract, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Contract>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Contract.class.getClassLoader(), Contract.class,
			ModelWrapper.class);

		try {
			Constructor<Contract> constructor =
				(Constructor<Contract>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Contract, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Contract, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Contract, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Contract, Object>>();
		Map<String, BiConsumer<Contract, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Contract, ?>>();

		attributeGetterFunctions.put("uuid", Contract::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Contract, String>)Contract::setUuid);
		attributeGetterFunctions.put("contractId", Contract::getContractId);
		attributeSetterBiConsumers.put(
			"contractId", (BiConsumer<Contract, Long>)Contract::setContractId);
		attributeGetterFunctions.put("groupId", Contract::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Contract, Long>)Contract::setGroupId);
		attributeGetterFunctions.put("companyId", Contract::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Contract, Long>)Contract::setCompanyId);
		attributeGetterFunctions.put("userId", Contract::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Contract, Long>)Contract::setUserId);
		attributeGetterFunctions.put("userName", Contract::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Contract, String>)Contract::setUserName);
		attributeGetterFunctions.put("createDate", Contract::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Contract, Date>)Contract::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Contract::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Contract, Date>)Contract::setModifiedDate);
		attributeGetterFunctions.put("modifierId", Contract::getModifierId);
		attributeSetterBiConsumers.put(
			"modifierId", (BiConsumer<Contract, Long>)Contract::setModifierId);
		attributeGetterFunctions.put("modifierName", Contract::getModifierName);
		attributeSetterBiConsumers.put(
			"modifierName",
			(BiConsumer<Contract, String>)Contract::setModifierName);
		attributeGetterFunctions.put("name", Contract::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Contract, String>)Contract::setName);
		attributeGetterFunctions.put("version", Contract::getVersion);
		attributeSetterBiConsumers.put(
			"version", (BiConsumer<Contract, String>)Contract::setVersion);
		attributeGetterFunctions.put("statusId", Contract::getStatusId);
		attributeSetterBiConsumers.put(
			"statusId", (BiConsumer<Contract, Long>)Contract::setStatusId);
		attributeGetterFunctions.put("typeId", Contract::getTypeId);
		attributeSetterBiConsumers.put(
			"typeId", (BiConsumer<Contract, Long>)Contract::setTypeId);
		attributeGetterFunctions.put("startdate", Contract::getStartdate);
		attributeSetterBiConsumers.put(
			"startdate", (BiConsumer<Contract, Date>)Contract::setStartdate);
		attributeGetterFunctions.put("reviewdate", Contract::getReviewdate);
		attributeSetterBiConsumers.put(
			"reviewdate", (BiConsumer<Contract, Date>)Contract::setReviewdate);
		attributeGetterFunctions.put("autoextend", Contract::getAutoextend);
		attributeSetterBiConsumers.put(
			"autoextend",
			(BiConsumer<Contract, Boolean>)Contract::setAutoextend);
		attributeGetterFunctions.put("termId", Contract::getTermId);
		attributeSetterBiConsumers.put(
			"termId", (BiConsumer<Contract, Long>)Contract::setTermId);
		attributeGetterFunctions.put("remarks", Contract::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks", (BiConsumer<Contract, String>)Contract::setRemarks);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getContractId() {
		return _contractId;
	}

	@Override
	public void setContractId(long contractId) {
		_columnBitmask |= CONTRACTID_COLUMN_BITMASK;

		if (!_setOriginalContractId) {
			_setOriginalContractId = true;

			_originalContractId = _contractId;
		}

		_contractId = contractId;
	}

	public long getOriginalContractId() {
		return _originalContractId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifierId() {
		return _modifierId;
	}

	@Override
	public void setModifierId(long modifierId) {
		_modifierId = modifierId;
	}

	@JSON
	@Override
	public String getModifierName() {
		if (_modifierName == null) {
			return "";
		}
		else {
			return _modifierName;
		}
	}

	@Override
	public void setModifierName(String modifierName) {
		_modifierName = modifierName;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@JSON
	@Override
	public long getStatusId() {
		return _statusId;
	}

	@Override
	public void setStatusId(long statusId) {
		_statusId = statusId;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_typeId = typeId;
	}

	@JSON
	@Override
	public Date getStartdate() {
		return _startdate;
	}

	@Override
	public void setStartdate(Date startdate) {
		_startdate = startdate;
	}

	@JSON
	@Override
	public Date getReviewdate() {
		return _reviewdate;
	}

	@Override
	public void setReviewdate(Date reviewdate) {
		_reviewdate = reviewdate;
	}

	@JSON
	@Override
	public boolean getAutoextend() {
		return _autoextend;
	}

	@JSON
	@Override
	public boolean isAutoextend() {
		return _autoextend;
	}

	@Override
	public void setAutoextend(boolean autoextend) {
		_autoextend = autoextend;
	}

	@JSON
	@Override
	public long getTermId() {
		return _termId;
	}

	@Override
	public void setTermId(long termId) {
		_termId = termId;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Contract.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Contract.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Contract toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContractImpl contractImpl = new ContractImpl();

		contractImpl.setUuid(getUuid());
		contractImpl.setContractId(getContractId());
		contractImpl.setGroupId(getGroupId());
		contractImpl.setCompanyId(getCompanyId());
		contractImpl.setUserId(getUserId());
		contractImpl.setUserName(getUserName());
		contractImpl.setCreateDate(getCreateDate());
		contractImpl.setModifiedDate(getModifiedDate());
		contractImpl.setModifierId(getModifierId());
		contractImpl.setModifierName(getModifierName());
		contractImpl.setName(getName());
		contractImpl.setVersion(getVersion());
		contractImpl.setStatusId(getStatusId());
		contractImpl.setTypeId(getTypeId());
		contractImpl.setStartdate(getStartdate());
		contractImpl.setReviewdate(getReviewdate());
		contractImpl.setAutoextend(isAutoextend());
		contractImpl.setTermId(getTermId());
		contractImpl.setRemarks(getRemarks());

		contractImpl.resetOriginalValues();

		return contractImpl;
	}

	@Override
	public int compareTo(Contract contract) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), contract.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Contract)) {
			return false;
		}

		Contract contract = (Contract)obj;

		long primaryKey = contract.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ContractModelImpl contractModelImpl = this;

		contractModelImpl._originalUuid = contractModelImpl._uuid;

		contractModelImpl._originalContractId = contractModelImpl._contractId;

		contractModelImpl._setOriginalContractId = false;

		contractModelImpl._originalGroupId = contractModelImpl._groupId;

		contractModelImpl._setOriginalGroupId = false;

		contractModelImpl._originalCompanyId = contractModelImpl._companyId;

		contractModelImpl._setOriginalCompanyId = false;

		contractModelImpl._setModifiedDate = false;

		contractModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Contract> toCacheModel() {
		ContractCacheModel contractCacheModel = new ContractCacheModel();

		contractCacheModel.uuid = getUuid();

		String uuid = contractCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contractCacheModel.uuid = null;
		}

		contractCacheModel.contractId = getContractId();

		contractCacheModel.groupId = getGroupId();

		contractCacheModel.companyId = getCompanyId();

		contractCacheModel.userId = getUserId();

		contractCacheModel.userName = getUserName();

		String userName = contractCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contractCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contractCacheModel.createDate = createDate.getTime();
		}
		else {
			contractCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contractCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contractCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contractCacheModel.modifierId = getModifierId();

		contractCacheModel.modifierName = getModifierName();

		String modifierName = contractCacheModel.modifierName;

		if ((modifierName != null) && (modifierName.length() == 0)) {
			contractCacheModel.modifierName = null;
		}

		contractCacheModel.name = getName();

		String name = contractCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			contractCacheModel.name = null;
		}

		contractCacheModel.version = getVersion();

		String version = contractCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			contractCacheModel.version = null;
		}

		contractCacheModel.statusId = getStatusId();

		contractCacheModel.typeId = getTypeId();

		Date startdate = getStartdate();

		if (startdate != null) {
			contractCacheModel.startdate = startdate.getTime();
		}
		else {
			contractCacheModel.startdate = Long.MIN_VALUE;
		}

		Date reviewdate = getReviewdate();

		if (reviewdate != null) {
			contractCacheModel.reviewdate = reviewdate.getTime();
		}
		else {
			contractCacheModel.reviewdate = Long.MIN_VALUE;
		}

		contractCacheModel.autoextend = isAutoextend();

		contractCacheModel.termId = getTermId();

		contractCacheModel.remarks = getRemarks();

		String remarks = contractCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			contractCacheModel.remarks = null;
		}

		return contractCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Contract, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Contract, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contract, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Contract)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Contract, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Contract, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contract, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Contract)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Contract>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _contractId;
	private long _originalContractId;
	private boolean _setOriginalContractId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifierId;
	private String _modifierName;
	private String _name;
	private String _version;
	private long _statusId;
	private long _typeId;
	private Date _startdate;
	private Date _reviewdate;
	private boolean _autoextend;
	private long _termId;
	private String _remarks;
	private long _columnBitmask;
	private Contract _escapedModel;

}